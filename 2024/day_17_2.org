Decoded program:

#+BEGIN_SRC 
 0: [ 2 4 ] b = a & 0b111
 2: [ 1 4 ] b = b ^ 4
 4: [ 7 5 ] c = a >> b
 6: [ 4 1 ] b = b ^ c
 8: [ 1 4 ] b = b ^ 4
10: [ 5 5 ] output = b & 0b111
12: [ 0 3 ] a = a >> 3
14: [ 3 0 ] if a != 0 { goto 0 }
#+END_SRC

For each 3 lower bits of A, it computes and sends to the output the
following expression:

~R = ((((A & 0b111) ^ 0b100) ^ C) ^ 0b100) & 0b111~

Where:

~C = A >> ((A & 0b111) ^ 0b100)~

Since ~X ^ X = 0~ and ~X ^ 0 = X~, the expression may be reduced to
the following (remove ~0b100 ^ … ^ 0b100~):

~R = ((A & 0b111) ^ C) & 0b111~

What bit patterns in A register will lead to a specific number on the
output (~0b000~, ~0b001, ~0b010~, …, ~0b111~)?

For output ~R = 0b000~:

| A             | A' = A & 0b111 | B = A' ^ 0b100 | >> N | C     | R = (A' ^ C) & 0b111 | such C that R | A pattern    |
|---------------+----------------+----------------+------+-------+----------------------+---------------+--------------|
| 0b…₉₈₇₆₅₄₃000 | 0b000          | 0b100          |    4 | 0b₆₅₄ | 0b000                | 0b000         | 0b___000_000 |
| 0b…₉₈₇₆₅₄₃001 | 0b001          | 0b101          |    5 | 0b₇₆₅ | 0b000                | 0b001         | 0b__001__001 |
| 0b…₉₈₇₆₅₄₃010 | 0b010          | 0b110          |    6 | 0b₈₇₆ | 0b000                | 0b010         | 0b_010___010 |
| 0b…₉₈₇₆₅₄₃011 | 0b011          | 0b111          |    7 | 0b₉₈₇ | 0b000                | 0b011         | 0b011____011 |
| 0b…₉₈₇₆₅₄₃100 | 0b100          | 0b000          |    0 | 0b100 | 0b000                | 0b100         | 0b_______100 |
| 0b…₉₈₇₆₅₄₃101 | 0b101          | 0b001          |    1 | 0b₃10 | 0b000                | 0b101 (bad)   |              |
| 0b…₉₈₇₆₅₄₃110 | 0b110          | 0b010          |    2 | 0b₄₃1 | 0b000                | 0b110 (bad)   |              |
| 0b…₉₈₇₆₅₄₃111 | 0b111          | 0b011          |    3 | 0b₅₄₃ | 0b000                | 0b111         | 0b____111111 |

So, the following bits in ~A~ will result in ~R = 0b000~:

| 0b___000_000 |
| 0b__001__001 |
| 0b_010___010 |
| 0b011____011 |
| 0b_______100 |
| 0b____111111 |

For output positions past the first one, the patterns will be shifted
by ~3 N~ bits.

For output ~R = 0b001~:

| A             | … | C     | R = (A' ^ C) & 0b111 | such C that R | A pattern    |
|---------------+---+-------+----------------------+---------------+--------------|
| 0b…₉₈₇₆₅₄₃000 |   | 0b₆₅₄ | 0b001                | 0b001         | 0b___001_000 |
| 0b…₉₈₇₆₅₄₃001 |   | 0b₇₆₅ | 0b001                | 0b000         | 0b__000__001 |
| 0b…₉₈₇₆₅₄₃010 |   | 0b₈₇₆ | 0b001                | 0b011         | 0b_011___010 |
| 0b…₉₈₇₆₅₄₃011 |   | 0b₉₈₇ | 0b001                | 0b010         | 0b010____011 |
| 0b…₉₈₇₆₅₄₃100 |   | 0b100 | 0b001                | 0b101 (bad)   |              |
| 0b…₉₈₇₆₅₄₃101 |   | 0b₃10 | 0b001                | 0b100 (bad)   |              |
| 0b…₉₈₇₆₅₄₃110 |   | 0b₄₃1 | 0b001                | 0b111         | 0b_____11110 |
| 0b…₉₈₇₆₅₄₃111 |   | 0b₅₄₃ | 0b001                | 0b110         | 0b____110111 |

For output ~R = 0b010~:

| A             | … | C     | … | such C that R | A pattern    |
|---------------+---+-------+---+---------------+--------------|
| 0b…₉₈₇₆₅₄₃000 |   | 0b₆₅₄ |   | 0b010         | 0b___010_000 |
| 0b…₉₈₇₆₅₄₃001 |   | 0b₇₆₅ |   | 0b011         | 0b__011__001 |
| 0b…₉₈₇₆₅₄₃010 |   | 0b₈₇₆ |   | 0b000         | 0b_000___010 |
| 0b…₉₈₇₆₅₄₃011 |   | 0b₉₈₇ |   | 0b001         | 0b001____011 |
| 0b…₉₈₇₆₅₄₃100 |   | 0b100 |   | 0b110 (bad)   |              |
| 0b…₉₈₇₆₅₄₃101 |   | 0b₃10 |   | 0b111 (bad)   |              |
| 0b…₉₈₇₆₅₄₃110 |   | 0b₄₃1 |   | 0b100 (bad)   |              |
| 0b…₉₈₇₆₅₄₃111 |   | 0b₅₄₃ |   | 0b101         | 0b____101111 |

For output ~R = 0b011~:

| A             | … | C     | … | such C that R | A pattern    |
|---------------+---+-------+---+---------------+--------------|
| 0b…₉₈₇₆₅₄₃000 |   | 0b₆₅₄ |   | 0b011         | 0b___011_000 |
| 0b…₉₈₇₆₅₄₃001 |   | 0b₇₆₅ |   | 0b010         | 0b__010__001 |
| 0b…₉₈₇₆₅₄₃010 |   | 0b₈₇₆ |   | 0b001         | 0b_001___010 |
| 0b…₉₈₇₆₅₄₃011 |   | 0b₉₈₇ |   | 0b000         | 0b000____011 |
| 0b…₉₈₇₆₅₄₃100 |   | 0b100 |   | 0b111 (bad)   |              |
| 0b…₉₈₇₆₅₄₃101 |   | 0b₃10 |   | 0b110         | 0b______1101 |
| 0b…₉₈₇₆₅₄₃110 |   | 0b₄₃1 |   | 0b101         | 0b_____10110 |
| 0b…₉₈₇₆₅₄₃111 |   | 0b₅₄₃ |   | 0b100         | 0b____100111 |

For output ~R = 0b100~:

| A             | … | C     | … | such C that R | A pattern    |
|---------------+---+-------+---+---------------+--------------|
| 0b…₉₈₇₆₅₄₃000 |   | 0b₆₅₄ |   | 0b100         | 0b___100_000 |
| 0b…₉₈₇₆₅₄₃001 |   | 0b₇₆₅ |   | 0b101         | 0b__101__001 |
| 0b…₉₈₇₆₅₄₃010 |   | 0b₈₇₆ |   | 0b110         | 0b_110___010 |
| 0b…₉₈₇₆₅₄₃011 |   | 0b₉₈₇ |   | 0b111         | 0b111____011 |
| 0b…₉₈₇₆₅₄₃100 |   | 0b100 |   | 0b000 (bad)   |              |
| 0b…₉₈₇₆₅₄₃101 |   | 0b₃10 |   | 0b001 (bad)   |              |
| 0b…₉₈₇₆₅₄₃110 |   | 0b₄₃1 |   | 0b010 (bad)   |              |
| 0b…₉₈₇₆₅₄₃111 |   | 0b₅₄₃ |   | 0b011         | 0b____011111 |

For output ~R = 0b101~:

# TODO

Output ~0b110~ doesn't occur in the program.

For output ~R = 0b111~:

# TODO
